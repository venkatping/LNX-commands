1. List docker images
# docker images

2. List Running containers
# docker ps

3. List Running and stopped containers
# docker ps -a

4. check docker version
# docker -v	==> Display single Line Output
# docker version ==> Display Detailed output

5. Stop a container
# docker stop <CONTAINER_ID>
# docker stop <CONTAINER_NAME>

6. Remove stopped containers
# docker rm <container_ID> or docker rm <container_name>

7. Delete an Image
# docker rmi <Image_Name ==> make sure no Running or Stopped containers are available with image, it any containers exist with this image, then we cannot delete the Image

8. Want to docwnload an Image but i should not RUN IT
# docker pull ubuntu

9. when we want to RUN an ubuntu/centos container, when we execute # docker run untuntu, it will run and will immediately exists why?
unlike virtual machines, containers are meant to host an Operating system(ubuntu/centos)
Containers are meant to RUN a specific task or process such as webserver, App server, DB server etc, once the taask completes and it will exit
container only lives as long as the process inside it is alive, if the webserver inside the container stopped/crashed then the container will exit
This is why when we RUN a container with ubuntu/centos image, it will stop immediately, because ubuntu is just an image of an OS and there is no process/Application running in it

# docker run ubuntu sleep 100

10. How to RUN a command on a RUNNING container
# docker exec <container_name> cat /etc/hosts
# docker exec sleepy_germain cat /etc/hosts
# docker exec sleepy_germain hostname

11. How to attach/Dettach from a container
# docker run kodekloud/simple-webapp ==> This will run in foreground
# docker run -d kodekloud/simple-webapp ==> Now container will run in Backend
# docker attach <CONTAINER_ID> ==> This will attach to container

12. Delete stopped containers,dangling images, network
# docker system prune

13. list only container IDs( it includes container IDs of Both Running created stopped etc)
# docker ps -aq

14. Stop All Running containers with single command
# docker stop $(docker ps -aq)

15. Delete All (stopped,Running,created etc) containers using single command
# docker rm $(docker ps -aq)

16. By using below command we can run redis, In this case if we didn't define any tag it will by default take latest version
# docker run redis

17. By using Below command we can redis of particular version, In this case we mentioned as redis:4.0 and redis:4.0 is called as tag
docker run redis:4.0
We can find all supported tags at dockerhub.com

18. By Default Docker container Does Not Listen to standard Input(example: Enter your name), in other words it does run in Non-Interactive Mode, To avoid This we can use -i option and -t stands for pseudo termincal, so with the combination of -i and -t we are now attched to the terminal as well as interactive Mode on the container
# docker run -i kodekloud/simple-prompt-docker
Welcome! Please enter your name: Naveen

Hello and Welcome Naveen!
$ 

19. Run Nginx container with name as per wish on port 8080 which is called PortMapping
# docker run -d -p 8080:80 --name webapp nginx
